#!/usr/bin/env bash

set -e

# Define variables
PROFILE=${1:-default}
ENV_FILE=".env"
CUSTOM_ENV_FILE=".env.${PROFILE}"
CONFIG_FILE="install.conf.yaml"
TEMPLATE_FILE="install.conf.template.yaml"
DIR_DOTBOT="dotbot"
DIR_COMPLETE_ALIAS="complete-alias"
DOTBOT_BIN="bin/dotbot"
BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Load default (minimal) environment
if [[ -f "$ENV_FILE" ]]; then
    echo "Loading default environment"
    export $(grep -v '^#' "$ENV_FILE" | xargs)
fi

# Load profile-specific environment
if [[ -f "$CUSTOM_ENV_FILE" ]]; then
    echo "Loading profile: $PROFILE"
    export $(grep -v '^#' "$CUSTOM_ENV_FILE" | xargs)
else
    echo "No profile-specific environment found for $PROFILE. Proceeding with default."
fi

# Ensure the GITCONFIG_FILE variable is defined
GITCONFIG_FILE=".gitconfig.${PROFILE}"
if [[ ! -f "$GITCONFIG_FILE" ]]; then
    echo "Profile-specific .gitconfig not found. Using default."
    GITCONFIG_FILE=".gitconfig.default"
fi
export GITCONFIG_FILE="${GITCONFIG_FILE}"



# Preprocess the YAML file to include or exclude Starship.toml dynamically
if [[ "$USE_NERD_FONT" == "true" ]]; then
    echo "Nerd Fonts enabled. Including Starship configuration."
    envsubst < "$TEMPLATE_FILE" > "$CONFIG_FILE"
else
    echo "Nerd Fonts disabled. Excluding Starship configuration."
    sed '/~\/\.config\/starship\.toml/d' "$TEMPLATE_FILE" | envsubst > "$CONFIG_FILE"
fi

# Install custom aliases
echo "Installing custom aliases..."
cd "${BASEDIR}"
git -C "${DIR_COMPLETE_ALIAS}" submodule sync --quiet --recursive
git submodule update --init --recursive "${DIR_COMPLETE_ALIAS}"

# Combine aliases into a single completion file
cat "${DIR_COMPLETE_ALIAS}/complete_alias" my-complete-alias > .bash_completion

# Function to remove a regular file if it exists and is not a symlink
remove_regular_file() {
    local file="$1"
    if [[ -f "$file" && ! -L "$file" ]]; then
        echo "Removing regular file: $file"
        rm -f "$file"
    fi
}

# List of files to check
files_to_remove=("$HOME/.bashrc" "$HOME/.profile" "$HOME/.bash_logout" "$HOME/.ssh/config")

# Loop through each file and call the function
for file in "${files_to_remove[@]}"; do
    remove_regular_file "$file"
done

# ==============================================================================
# Create GenAIScript Configuration from Template
# ==============================================================================
echo "Generating GenAIScript configuration file..."
GENAI_TEMPLATE_FILE="${BASEDIR}/genaiscript/genaiscript.config.yaml.template" # Source template in dotfiles/genaiscript
GENAI_CONFIG_FILE="${BASEDIR}/genaiscript.config.yaml"                         # Intermediate output within dotfiles (optional, could skip)
GENAI_HOME_CONFIG_FILE="$HOME/genaiscript.config.yaml"                       # Target file in home directory

# Define ANSI color codes (if not already defined earlier in your script)
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m' # Added yellow for warnings/skips
NC='\033[0m' # No Color

# Ensure the YAML template file exists
if [[ ! -f "$GENAI_TEMPLATE_FILE" ]]; then
    echo -e "${RED}Error: GenAIScript YAML template file not found at ${GENAI_TEMPLATE_FILE}${NC}" >&2
else
    # Use envsubst to substitute only $HOME
    export HOME # Ensure HOME is exported for envsubst
    if envsubst '$HOME' < "$GENAI_TEMPLATE_FILE" > "$GENAI_CONFIG_FILE"; then
        echo "GenAIScript configuration generated at ${GENAI_CONFIG_FILE}"
        # Copy the generated config to the home directory, overwriting if it exists
        if cp -f "${GENAI_CONFIG_FILE}" "${GENAI_HOME_CONFIG_FILE}"; then
            echo -e "${GREEN}Successfully copied YAML configuration to ${GENAI_HOME_CONFIG_FILE}${NC}"
        else
            echo -e "${RED}Error: Failed to copy YAML configuration to ${GENAI_HOME_CONFIG_FILE}${NC}" >&2
        fi
    else
        echo -e "${RED}Error: Failed to generate GenAIScript YAML configuration file.${NC}" >&2
    fi
fi

# ==============================================================================
# Copy .env.genaiscript Template if Missing
# ==============================================================================
echo "Handling .env.genaiscript file..."
ENV_TEMPLATE_FILE="${BASEDIR}/genaiscript/.env.genaiscript.template" # Source template in dotfiles/genaiscript
ENV_HOME_FILE="$HOME/.env.genaiscript"                             # Target file in home directory

# Ensure the .env template file exists
if [[ ! -f "$ENV_TEMPLATE_FILE" ]]; then
    echo -e "${YELLOW}Warning: .env.genaiscript template file not found at ${ENV_TEMPLATE_FILE}. Skipping.${NC}" >&2
else
    # Check if the destination .env file already exists
    if [[ -f "$ENV_HOME_FILE" ]]; then
        echo -e "${YELLOW}File ${ENV_HOME_FILE} already exists. Skipping copy.${NC}"
    else
        # Copy the template file to the home directory since it doesn't exist
        echo "Copying .env template to ${ENV_HOME_FILE}..."
        if cp "${ENV_TEMPLATE_FILE}" "${ENV_HOME_FILE}"; then
            echo -e "${GREEN}Successfully copied .env template to ${ENV_HOME_FILE}${NC}"
            echo -e "${YELLOW}Note: Remember to populate ${ENV_HOME_FILE} with your actual secrets/keys.${NC}"
        else
            echo -e "${RED}Error: Failed to copy .env template to ${ENV_HOME_FILE}${NC}" >&2
        fi
    fi
fi

# ==============================================================================
# Create GenAIScript Configuration from Template
# ==============================================================================
echo "Generating GenAIScript configuration file..."
GENAI_TEMPLATE_FILE="${BASEDIR}/genaiscript/genaiscript.config.yaml.template"
GENAI_CONFIG_FILE="${BASEDIR}/genaiscript.config.yaml" # Output within the project
GENAI_HOME_CONFIG_FILE="$HOME/genaiscript.config.yaml" # Target file in home directory

# Define ANSI color codes
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Ensure the template file exists
if [[ ! -f "$GENAI_TEMPLATE_FILE" ]]; then
    echo -e "${RED}Error: GenAIScript template file not found at ${GENAI_TEMPLATE_FILE}${NC}" >&2
else
    # Use envsubst to substitute only $HOME
    # Export HOME just to be extra sure it's available for envsubst in all contexts
    export HOME
    if envsubst '$HOME' < "$GENAI_TEMPLATE_FILE" > "$GENAI_CONFIG_FILE"; then
        echo "GenAIScript configuration generated at ${GENAI_CONFIG_FILE}"
        # Copy the generated config to the home directory, overwriting if it exists
        if cp -f "${GENAI_CONFIG_FILE}" "${GENAI_HOME_CONFIG_FILE}"; then
            # Print success message in green
            echo -e "${GREEN}Successfully copied configuration to ${GENAI_HOME_CONFIG_FILE}${NC}"
        else
            # Print error message in red
            echo -e "${RED}Error: Failed to copy configuration to ${GENAI_HOME_CONFIG_FILE}${NC}" >&2
            # Consider exiting if this copy is critical: exit 1
        fi
    else
        echo -e "${RED}Error: Failed to generate GenAIScript configuration file.${NC}" >&2
        # Consider exiting if generation failed: exit 1
    fi
fi

# ==============================================================================
# Install/Update GenAIScript Samples using degit (requires npx/npm)
# ==============================================================================
echo "Checking/Updating GenAIScript samples..."
# Define the target directory for the sample scripts *within* the dotfiles structure
GENAI_SAMPLES_DIR="${BASEDIR}/genaiscript-samples"

# Check if npm (and therefore npx) is available
if command -v npm &> /dev/null; then
    echo "npm/npx found. Attempting GenAIScript samples installation/update."

    # Ensure the target directory exists
    mkdir -p "$GENAI_SAMPLES_DIR"

    # Run degit with --force to overwrite existing files and fetch the latest
    # Downloading directly into the target directory within dotfiles
    echo "Downloading/Updating GenAIScript samples to ${GENAI_SAMPLES_DIR}..."
    if npx --yes degit --force microsoft/genaiscript/packages/sample/genaisrc/samples#main "$GENAI_SAMPLES_DIR"; then
        echo -e "${GREEN}GenAIScript samples installed/updated successfully in ${GENAI_SAMPLES_DIR}${NC}"
    else
        # Report error but don't necessarily halt the whole script unless desired
        echo -e "${RED}Error: Failed to install/update GenAIScript samples using degit.${NC}" >&2
        # You might want to `exit 1` here if this step is critical
    fi
else
    # Warn if npm/npx is missing
    echo -e "${YELLOW}Warning: npm/npx not found in PATH. Skipping GenAIScript samples installation/update.${NC}" >&2
    echo -e "${YELLOW}         Install Node.js (which includes npm and npx) to enable this feature.${NC}" >&2
fi


# Initialize Dotbot submodule
echo "Initializing Dotbot submodule..."
cd "${BASEDIR}"
git -C "${DIR_DOTBOT}" submodule sync --quiet --recursive
git submodule update --init --recursive "${DIR_DOTBOT}"

# Run Dotbot
echo "Running Dotbot..."
"${BASEDIR}/${DIR_DOTBOT}/${DOTBOT_BIN}" -d "${BASEDIR}" -c "${CONFIG_FILE}"

# Install Starship if necessary
if [[ "$USE_NERD_FONT" == "true" && ! -x "$HOME/.local/bin/starship" ]]; then
    echo "Installing Starship..."
    curl -fsSL https://starship.rs/install.sh | sh -s -- --bin-dir ~/.local/bin -y
fi

echo "Dotfiles setup complete!"

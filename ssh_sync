#!/usr/bin/env bash

# Set default synchronization direction: from WSL to host
SOURCE_DIR="$HOME/.ssh/"
HOST_USERNAME=$(cmd.exe /C "echo %USERNAME%" 2>/dev/null | tr -d '\r')  # Getting the username from the host
DEST_DIR="/mnt/c/Users/$HOST_USERNAME/.ssh/"

# Helper function to print usage
usage() {
    echo "Usage: $0 [--host-to-wsl]"
    echo "  --host-to-wsl  Sync from host to WSL instead of the default WSL to host."
    echo "  --help         Display this help message and exit."
    exit 1
}

# Parse command-line arguments
while [ "$#" -gt 0 ]; do
    case "$1" in
        --host-to-wsl)
            SOURCE_DIR="/mnt/c/Users/$HOST_USERNAME/.ssh/"
            DEST_DIR="$HOME/.ssh/"
            shift
            ;;
        --help)
            usage
            ;;
        *)
            usage
            ;;
    esac
done

# Function to synchronize SSH directories
sync_ssh_directories() {
    echo "Syncing from $SOURCE_DIR to $DEST_DIR"

    # Check if the base directory exists
    BASE_DIR=$(dirname "$DEST_DIR")
    if [ ! -d "$BASE_DIR" ]; then
        echo "Error: The base directory $BASE_DIR does not exist."
        exit 1
    fi

    # Ensure the SSH destination directory exists
    mkdir -p "$DEST_DIR"
    
    rsync -nvr "$SOURCE_DIR" "$DEST_DIR" | awk '{
        # Existing color-coding logic
    }'
    
    read -p "Proceed with the synchronization (y/n)? " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rsync -avhL "$SOURCE_DIR" "$DEST_DIR"
        
        # Existing permission adjustment logic
        if [[ "$1" == "--host-to-wsl" ]]; then
            find "$DEST_DIR" -type d -exec chmod 700 {} \;
            find "$DEST_DIR" -type f -exec chmod 600 {} \;
            find "$DEST_DIR" -name '*.pub' -exec chmod 644 {} \;
        fi
    fi
}

# Execute the synchronization function
sync_ssh_directories
